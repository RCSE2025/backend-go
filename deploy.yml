version: '3.8'

services:
  backend-go:
    image: ${DOCKER_REGISTRY}/${DOCKER_REGISTRY_OWNER}/${DOCKER_APP_NAME}:${IMAGE_TAG}
    deploy:
      labels:
        # prometheus
        - "prometheus.enable=true"
        - "prometheus.scrape-port=80"
        - "prometheus.scrape-path=/metrics"
        - "prometheus.job=backend-go"
        # loki
        - "logging=promtail"
        - "logging_jobname=containerlogs"
        # traefik
        - "traefik.enable=true"
        - "traefik.http.routers.backend-go.rule=Host(`backend-go.hack.vingp.dev`)"
        - "traefik.http.routers.backend-go.entrypoints=https,http"
        - "traefik.http.routers.backend-go.tls.certresolver=myresolver"
        - "traefik.http.services.backend-go.loadbalancer.server.port=80"
        - "traefik.http.routers.backend-go.tls=true"
        - "traefik.docker.network=traefik-public"
        - "traefik.docker.lbswarm=true"
        - "traefik.http.routers.backend-go.service=backend-go"
      replicas: 2
      update_config:
        parallelism: 3
        order: start-first
        failure_action: rollback
        delay: 10s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: any
        delay: 20s
        max_attempts: 5
        window: 120s
    networks:
      - "default"
      - "traefik"

  backend-go-postgres:
    deploy:
      replicas: 1
      update_config:
        parallelism: 0
        order: stop-first
        failure_action: rollback
        delay: 10s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
      placement:
        constraints: [ node.role == manager ]
    labels:
      logging: "promtail"
      logging_jobname: "containerlogs"
    networks:
      - "default"

  backend-go-pgbouncer:
    deploy:
      replicas: 1
      update_config:
        parallelism: 0
        order: stop-first
        failure_action: rollback
        delay: 10s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
      placement:
        constraints: [ node.role == manager ]
    labels:
      logging: "promtail"
      logging_jobname: "containerlogs"
    networks:
      - "default"

#  backend-go-pgadmin:
#    labels:
#      logging: "promtail"
#      logging_jobname: "containerlogs"
#    networks:
#      - "default"

networks:
  default:
    name: test-hack
#    external: true
    attachable: true
  traefik:
    name: traefik-public
    external: true