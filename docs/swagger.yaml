definitions:
  cart.PostProductRequest:
    properties:
      product_id:
        type: integer
      quantity:
        type: integer
    type: object
  model.Business:
    properties:
      address:
        type: string
      created_at:
        type: string
      full_name:
        type: string
      id:
        type: integer
      inn:
        type: integer
      ogrn:
        type: integer
      owner:
        type: string
      short_name:
        type: string
      updated_at:
        type: string
    type: object
  model.CartItem:
    properties:
      product_id:
        type: integer
      quantity:
        type: integer
      user_id:
        type: integer
    type: object
  model.CartItemsResponse:
    properties:
      product:
        $ref: '#/definitions/model.Product'
      product_id:
        type: integer
      quantity:
        type: integer
      user_id:
        type: integer
    type: object
  model.CategoryFilter:
    properties:
      category:
        $ref: '#/definitions/model.ProductCategory'
      id:
        type: string
      image:
        type: string
      link:
        type: string
      title:
        type: string
    type: object
  model.ExtendedOrderItem:
    properties:
      order_item:
        $ref: '#/definitions/model.OrderItem'
      product:
        $ref: '#/definitions/model.Product'
    type: object
  model.OrderItem:
    properties:
      created_at:
        type: string
      order_id:
        type: integer
      price:
        type: number
      product_id:
        type: integer
      quantity:
        type: integer
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  model.OrderItemResponse:
    properties:
      address:
        type: string
      created_at:
        type: string
      id:
        type: integer
      order_items:
        items:
          $ref: '#/definitions/model.ExtendedOrderItem'
        type: array
      payment_confirm:
        type: boolean
      status:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  model.OrderStatusType:
    enum:
    - created
    - delivery
    - closed
    type: string
    x-enum-varnames:
    - StatusCreated
    - StatusDelivery
    - StatusClosed
  model.Product:
    properties:
      brand:
        type: string
      business_id:
        type: integer
      category:
        $ref: '#/definitions/model.ProductCategory'
      created_at:
        type: string
      description:
        type: string
      discount:
        type: number
      estimated_delivery:
        type: string
      id:
        type: integer
      images:
        description: Загружается отдельно
        items:
          $ref: '#/definitions/model.ProductImage'
        type: array
      price:
        type: number
      quantity:
        type: integer
      rating:
        type: number
      related_products:
        description: Загружается отдельно
        items:
          type: integer
        type: array
      review_count:
        type: integer
      reviews:
        description: Загружается отдельно
        items:
          $ref: '#/definitions/model.ProductReview'
        type: array
      sku:
        type: string
      specifications:
        description: Загружается отдельно
        items:
          $ref: '#/definitions/model.ProductSpecification'
        type: array
      status:
        $ref: '#/definitions/model.ProductStatus'
      title:
        type: string
      updated_at:
        type: string
    type: object
  model.ProductCategory:
    enum:
    - ELECTRONICS
    - HOME
    - FASHION
    - SPORTS
    - BEAUTY
    - TOYS
    - BOOKS
    - FOOD
    - OTHER
    type: string
    x-enum-varnames:
    - ProductCategoryElectronics
    - ProductCategoryHome
    - ProductCategoryFashion
    - ProductCategorySports
    - ProductCategoryBeauty
    - ProductCategoryToys
    - ProductCategoryBooks
    - ProductCategoryFood
    - ProductCategoryOther
  model.ProductCreateRequest:
    properties:
      brand:
        type: string
      business_id:
        type: integer
      category:
        $ref: '#/definitions/model.ProductCategory'
      description:
        type: string
      discount:
        minimum: 0
        type: number
      estimated_delivery:
        type: string
      price:
        type: number
      quantity:
        minimum: 0
        type: integer
      sku:
        type: string
      specifications:
        items:
          $ref: '#/definitions/model.ProductSpecification'
        type: array
      title:
        type: string
    required:
    - business_id
    - category
    - description
    - price
    - quantity
    - title
    type: object
  model.ProductImage:
    properties:
      created_at:
        type: string
      file_uuid:
        type: string
      id:
        type: integer
      is_primary:
        type: boolean
      product_id:
        type: integer
      updated_at:
        type: string
      url:
        description: Не хранится в базе данных напрямую
        type: string
    type: object
  model.ProductReview:
    properties:
      comment:
        type: string
      created_at:
        type: string
      date:
        type: string
      id:
        type: integer
      images:
        description: Не хранится в базе данных напрямую
        items:
          type: string
        type: array
      product_id:
        type: integer
      rating:
        type: integer
      updated_at:
        type: string
      user_id:
        type: integer
      user_name:
        type: string
    type: object
  model.ProductSpecification:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      product_id:
        type: integer
      updated_at:
        type: string
      value:
        type: string
    type: object
  model.ProductStatus:
    enum:
    - consideration
    - reject
    - approve
    type: string
    x-enum-varnames:
    - StatusConsideration
    - StatusReject
    - StatusApprove
  model.ProductUpdateRequest:
    properties:
      brand:
        type: string
      business_id:
        type: integer
      category:
        $ref: '#/definitions/model.ProductCategory'
      description:
        type: string
      discount:
        minimum: 0
        type: number
      estimated_delivery:
        type: string
      price:
        type: number
      quantity:
        minimum: 0
        type: integer
      sku:
        type: string
      specifications:
        items:
          $ref: '#/definitions/model.ProductSpecification'
        type: array
      title:
        type: string
    type: object
  model.Token:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      token_type:
        example: bearer
        type: string
    type: object
  model.User:
    properties:
      created_at:
        type: string
      date_of_birth:
        type: string
      email:
        type: string
      id:
        type: integer
      inn:
        type: integer
      is_email_verified:
        type: boolean
      is_pasport_verified:
        type: boolean
      name:
        type: string
      patronymic:
        type: string
      role:
        type: string
      surname:
        type: string
      updated_at:
        type: string
    type: object
  model.UserCreate:
    properties:
      date_of_birth:
        type: string
      email:
        type: string
      inn:
        type: integer
      is_pasport_verified:
        type: boolean
      name:
        type: string
      password:
        type: string
      patronymic:
        type: string
      surname:
        type: string
    type: object
  order.CreateOrderRequest:
    properties:
      product_id:
        type: integer
      quantity:
        type: integer
    type: object
  order.SetOrderStatusRequest:
    properties:
      order_id:
        type: integer
      status:
        $ref: '#/definitions/model.OrderStatusType'
    type: object
  response.Response:
    properties:
      error:
        type: string
      message:
        type: string
      status:
        type: string
    type: object
info:
  contact: {}
  description: API for site
  title: Backend API
  version: "1.0"
paths:
  /business:
    post:
      consumes:
      - application/json
      description: Create new business
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.Business'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Business'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - OAuth2PasswordBearer: []
      summary: Create business
      tags:
      - business
  /business/{id}:
    delete:
      consumes:
      - application/json
      description: Delete business
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - OAuth2PasswordBearer: []
      summary: Delete business
      tags:
      - business
    get:
      consumes:
      - application/json
      description: Get business by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Business'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - OAuth2PasswordBearer: []
      summary: Get business by id
      tags:
      - business
    put:
      consumes:
      - application/json
      description: Update business
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.Business'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - OAuth2PasswordBearer: []
      summary: Update business
      tags:
      - business
  /business/{id}/user/{user_id}:
    delete:
      consumes:
      - application/json
      description: Remove user from business
      parameters:
      - description: business id
        in: path
        name: id
        required: true
        type: string
      - description: user id
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - OAuth2PasswordBearer: []
      summary: Remove user from business
      tags:
      - business
    post:
      consumes:
      - application/json
      description: Add user to business
      parameters:
      - description: business id
        in: path
        name: id
        required: true
        type: string
      - description: user id
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - OAuth2PasswordBearer: []
      summary: Add user to business
      tags:
      - business
  /business/{id}/users:
    get:
      consumes:
      - application/json
      description: Get all users for a business
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - OAuth2PasswordBearer: []
      summary: Get business users
      tags:
      - business
  /business/all:
    get:
      consumes:
      - application/json
      description: Get all businesses
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Business'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - OAuth2PasswordBearer: []
      summary: Get all businesses
      tags:
      - business
  /business/get_business_info/{inn}:
    get:
      consumes:
      - application/json
      description: Get business info by INN
      parameters:
      - description: inn
        in: path
        name: inn
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get business info by INN from api
      tags:
      - business
  /business/inn/{inn}:
    get:
      consumes:
      - application/json
      description: Get business by INN
      parameters:
      - description: inn
        in: path
        name: inn
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Business'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - OAuth2PasswordBearer: []
      summary: Get business by INN
      tags:
      - business
  /business/ogrn/{ogrn}:
    get:
      consumes:
      - application/json
      description: Get business by OGRN
      parameters:
      - description: ogrn
        in: path
        name: ogrn
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Business'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - OAuth2PasswordBearer: []
      summary: Get business by OGRN
      tags:
      - business
  /business/user:
    get:
      consumes:
      - application/json
      description: Get all businesses for a user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Business'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - OAuth2PasswordBearer: []
      summary: Get user businesses
      tags:
      - business
  /cart:
    delete:
      consumes:
      - application/json
      description: Delete product in user cart with ids
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          items:
            type: integer
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - OAuth2PasswordBearer: []
      summary: Delete product in cart
      tags:
      - cart
    get:
      consumes:
      - application/json
      description: Get user cart
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.CartItemsResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - OAuth2PasswordBearer: []
      summary: Get user cart
      tags:
      - cart
    post:
      consumes:
      - application/json
      description: Post product in cart
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/cart.PostProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CartItem'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - OAuth2PasswordBearer: []
      summary: Post product in cart
      tags:
      - cart
    put:
      consumes:
      - application/json
      description: Set product quantity in cart
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          additionalProperties:
            type: integer
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - OAuth2PasswordBearer: []
      summary: Set product quantity in cart
      tags:
      - cart
  /order:
    get:
      consumes:
      - application/json
      description: Get List Order
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.OrderItemResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - OAuth2PasswordBearer: []
      summary: Get List Order
      tags:
      - order
    post:
      consumes:
      - application/json
      description: Create new order
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          items:
            $ref: '#/definitions/order.CreateOrderRequest'
          type: array
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - OAuth2PasswordBearer: []
      summary: Create Order
      tags:
      - order
    put:
      consumes:
      - application/json
      description: Set Order status
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/order.SetOrderStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - OAuth2PasswordBearer: []
      summary: Set Order status
      tags:
      - order
  /payment/notifications:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Payment notification
      tags:
      - Payment
  /product:
    get:
      consumes:
      - application/json
      description: GetUserProduct
      produces:
      - application/json
      responses:
        "200":
          description: Successful upload
          schema:
            items:
              $ref: '#/definitions/model.Product'
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - OAuth2PasswordBearer: []
      summary: GetUserProduct
      tags:
      - product
    post:
      consumes:
      - application/json
      description: Create a new product
      parameters:
      - description: Product data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/model.ProductCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Product created
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Product'
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Create a new product
      tags:
      - product
  /product/{id}:
    delete:
      description: Delete a product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Product deleted
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Delete a product
      tags:
      - product
    get:
      description: Get product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successful operation
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Product'
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get product by ID
      tags:
      - product
    put:
      consumes:
      - application/json
      description: Update an existing product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Product data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/model.ProductUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Product updated
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Product'
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Update a product
      tags:
      - product
  /product/{id}/images/upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload multiple images for review
      parameters:
      - collectionFormat: csv
        description: Upload multiple images
        in: formData
        items:
          type: file
        name: upload
        required: true
        type: array
      - description: Review ID
        in: query
        name: review_id
        type: integer
      - description: Is primary image
        in: query
        name: is_primary
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Successful upload
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.ProductImage'
                  type: array
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Upload multiple images for review
      tags:
      - product
  /product/{id}/reviews:
    get:
      description: Get product reviews by product ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successful operation
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.ProductReview'
                  type: array
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get product reviews
      tags:
      - product
    post:
      consumes:
      - application/json
      description: Add a new review for a product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Review data
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/model.ProductReview'
      produces:
      - application/json
      responses:
        "201":
          description: Review created
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.ProductReview'
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Add product review
      tags:
      - product
  /product/categories:
    get:
      description: Get all product categories
      produces:
      - application/json
      responses:
        "200":
          description: Successful operation
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.CategoryFilter'
                  type: array
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get all product categories
      tags:
      - product
  /product/filter:
    get:
      consumes:
      - application/json
      description: Filter products by various criteria
      parameters:
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: brands
        type: array
      - collectionFormat: csv
        in: query
        items:
          enum:
          - ELECTRONICS
          - HOME
          - FASHION
          - SPORTS
          - BEAUTY
          - TOYS
          - BOOKS
          - FOOD
          - OTHER
          type: string
        name: categories
        type: array
      - in: query
        name: in_stock
        type: boolean
      - in: query
        name: max_price
        type: number
      - in: query
        name: min_price
        type: number
      - in: query
        name: on_sale
        type: boolean
      - in: query
        name: page
        type: integer
      - in: query
        name: per_page
        type: integer
      - in: query
        name: q
        type: string
      - in: query
        name: rating
        type: number
      - description: price-asc, price-desc, rating, newest
        in: query
        name: sort_by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful operation
          schema:
            items:
              $ref: '#/definitions/model.Product'
            type: array
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Filter products
      tags:
      - product
  /product/images/upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload multiple images
      parameters:
      - collectionFormat: csv
        description: Upload multiple images
        in: formData
        items:
          type: file
        name: upload
        required: true
        type: array
      - description: Product ID
        in: query
        name: product_id
        type: integer
      - description: Is primary image
        in: query
        name: is_primary
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Successful upload
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.ProductImage'
                  type: array
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Upload multiple images
      tags:
      - product
  /user:
    post:
      consumes:
      - application/json
      description: Create new user
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.UserCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Token'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Create user
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Update user
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - OAuth2PasswordBearer: []
      summary: Update user
      tags:
      - user
  /user/{id}:
    delete:
      consumes:
      - application/json
      description: Delete user by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - OAuth2PasswordBearer: []
      summary: Delete user by id
      tags:
      - user
    get:
      consumes:
      - application/json
      description: Get user by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - OAuth2PasswordBearer: []
      summary: Get user by id
      tags:
      - user
  /user/all:
    get:
      consumes:
      - application/json
      description: Get all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - OAuth2PasswordBearer: []
      summary: Get all users
      tags:
      - user
  /user/email:
    get:
      consumes:
      - application/json
      description: Get user by email
      parameters:
      - description: email
        in: query
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - OAuth2PasswordBearer: []
      summary: Get user by email
      tags:
      - user
  /user/email/verify:
    post:
      consumes:
      - application/json
      description: Verify email
      parameters:
      - description: Verification code
        in: query
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - OAuth2PasswordBearer: []
      summary: Verify email
      tags:
      - user
  /user/password/reset:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Refresh password
      parameters:
      - description: Refresh token
        in: formData
        name: token
        required: true
        type: string
      - description: Password
        in: formData
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Refresh password
      tags:
      - user
  /user/password/reset/email:
    post:
      consumes:
      - application/json
      description: Send reset password email
      parameters:
      - description: email
        in: query
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Send reset password email
      tags:
      - user
  /user/refresh:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Refresh token
      parameters:
      - description: Refresh token
        in: formData
        name: refresh_token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Token'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Refresh token
      tags:
      - user
  /user/self:
    delete:
      consumes:
      - application/json
      description: Delete self
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - OAuth2PasswordBearer: []
      summary: Delete self
      tags:
      - user
    get:
      consumes:
      - application/json
      description: Get user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - OAuth2PasswordBearer: []
      summary: Get user
      tags:
      - user
  /user/token:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Get token
      parameters:
      - description: Email
        in: formData
        name: username
        required: true
        type: string
      - description: Password
        in: formData
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Token'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get token
      tags:
      - user
securityDefinitions:
  OAuth2PasswordBearer:
    flow: password
    scopes:
      read: Grants read access
      write: Grants write access
    tokenUrl: /user/token
    type: oauth2
swagger: "2.0"
